version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

# 服务容器配置
services:
  # golang:                         # 自定义容器名称
  #   build:
  #     context: ./golang           # 制定构建使用的 Dockerfile 文件
  #   environment:                  # 设置环境变量
  #     - TZ=${TZ}
  #   volumes:                      # 设置挂载目录
  #     - ${CODE_PATH_HOST}:/usr/src/code   # 引用 .env 配置中 CODE_PATH_HOST 变量 将宿主机上代码存放的目录挂在到容器中 /usr/src/code 目录
  #   ports:
  #     - "8000:8000"               # 80开头端口号用于API服务
  #     - "8001:8001"
  #     - "8002:8002"
  #     - "8003:8003"
  #     - "9000:9000"               # 90开头端口号用于RPC服务
  #     - "9001:9001"
  #     - "9002:9002"
  #     - "9003:9003"
  #   stdin_open: true              # 打开标准输入 可以接受外部输入
  #   tty: true
  #   networks:
  #     - backend
  #   restart: always               # 制定容器退出后的重启策略为始终重启

  etcd:                           # 自定义容器名称
    build:
      context: ./etcd             # 制定构建使用的 Dockerfile 文件
    environment:                  # 设置环境变量
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
    ports:                        # 设置端口映射
      - "${ETCD_PORT}:2379"
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启

  mysql:                         # 自定义容器名称
    build:
      context: ./mysql           # 制定构建使用的 Dockerfile 文件
    environment:                 # 设置环境变量
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME} 
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ROOT_HOST='%'     # access remote mysql
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql  # 引用 .env 配置中 DATA_PATH_HOST 变量 将宿主机存放MySQL数据的目录挂载到容器中
    ports:                      # 设置端口映射
      - "${MYSQL_PORT}:3306"    # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启

  redis:                         # 自定义容器名称
    build:
      context: ./redis           # 制定构建使用的 Dockerfile 文件
    environment:                 # 设置环境变量
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/redis:/data  # 引用 .env 配置中 DATA_PATH_HOST 变量 将宿主机存放MySQL数据的目录挂载到容器中
    ports:                      # 设置端口映射
      - "${REDIS_PORT}:6379"    # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启
  
  mysql-manage:                         # 自定义容器名称
    build:
      context: ./mysql-manage           # 制定构建使用的 Dockerfile 文件
    environment:                 # 设置环境变量
      - TZ=${TZ}
      - PMA_ARBITRARY=1
      - MYSQL_USER=${MYSQL_MANAGE_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD}
      - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST}
      - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT}
    ports:                      # 设置端口映射
      - "${MYSQL_MANAGE_PORT}:80"    # 设置容器80端口映射指定宿主机端口
    depends_on:                 # 依赖容器
      - mysql                   # 在 MySQL服务容器启动后启动
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启
  
  redis-manage:                         # 自定义容器名称
    build:
      context: ./redis-manage           # 制定构建使用的 Dockerfile 文件
    environment:                 # 设置环境变量
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME}
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}
    ports:                      # 设置端口映射
      - "${REDIS_MANAGE_PORT}:80"    # 设置容器80端口映射指定宿主机端口
    depends_on:                 # 依赖容器
      - redis                   # 在 Redis服务容器启动后启动
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启
  
  prometheus:                         # 自定义容器名称
    build:
      context: ./prometheus           # 制定构建使用的 Dockerfile 文件
    environment:                 # 设置环境变量
      - TZ=${TZ}
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml # 将 prometheus 配置文件挂在到容器里
    ports:                      # 设置端口映射
      - "${PROMETHEUS_PORT}:9090"    # 设置容器80端口映射指定宿主机端口
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启
  
  grafana:                         # 自定义容器名称
    build:
      context: ./grafana           # 制定构建使用的 Dockerfile 文件
    environment:                 # 设置环境变量
      - TZ=${TZ}
    ports:                      # 设置端口映射
      - "${GRAFANA_PORT}:3000"    # 设置容器80端口映射指定宿主机端口
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启
  
  jaeger:                         # 自定义容器名称
    build:
      context: ./jaeger           # 制定构建使用的 Dockerfile 文件
    environment:                 # 设置环境变量
      - TZ=${TZ}
    ports:                      # 设置端口映射
      - "${JAEGER_PORT}:16686"    # 设置容器16686端口映射指定宿主机端口
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启
  
  dtm:                         # 自定义容器名称
    build:
      context: ./dtm           # 制定构建使用的 Dockerfile 文件
    environment:                 # 设置环境变量
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    volumes:
      - ./dtm/config.yaml:/app/dtm/configs/config.yaml   # 将dtm配置文件挂在到容器
    ports:                      # 设置端口映射
      - "${DTM_HTTP_PORT}:36789"    # 设置容器16686端口映射指定宿主机端口
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always               # 制定容器退出后的重启策略为始终重启
  